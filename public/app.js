webpackJsonp([0,2],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	console.log("NOT READY");
	
	var consoleKeeper = console;
	
	__webpack_require__.e/*nsure*/(1, function() {
	
	    console.log("ALMOST");
	
	   var
	        Ractive = __webpack_require__(2).Ractive,
	        routingConfig = __webpack_require__(1),
	        page = __webpack_require__(2).page,
	        _ = __webpack_require__(2).lodash,
	        domready = __webpack_require__(2).domready;
	
	    console = consoleKeeper;
	
	    console.log("ALMOST");
	
	    domready(function() {
	
	        console.log("READY");
	
	        function route(currentRoute, context) {
	
	            if (routingConfig[currentRoute] !== undefined) {
	                var currentRouteConfig = routingConfig[currentRoute];
	
	                var dummyData = {};
	                var partials = [];
	                var partialviews = {};
	
	                if (currentRouteConfig.partials !== undefined) {
	                    partials = currentRouteConfig.partials;
	                    partialviews = partials.reduce(function(a, b) {
	                        a[b.name] = b.view;
	                        return a;
	                    }, {});
	                }
	
	                var ractive = new Ractive({
	                    el: "#stage",
	                    template: currentRouteConfig.template,
	                    data: dummyData,
	                    lazy: false,
	                    partials: partialviews
	                });
	
	                currentRouteConfig.model(ractive, dummyData, page, context);
	
	                _(partials).each(function(partial) {
	                    partial.model(ractive);
	                });
	
	            } else {
	
	            }
	        }
	
	        //forcs the request to go to the server rather than the client
	        page.serverMap = function(url) {
	            page(url, function(context) {
	                window.location = url;
	            });
	        }
	
	        page('', function(context) {
	            route("", context);
	        });
	
	        page('/editor', function(context) {
	            route("editor", context);
	        });
	
	        page('/user', function(context) {
	            route("user", context);
	        });
	
	        page('/viewer', function(context) {
	            route("viewer", context);
	        });
	
	        page('/viewer/:tuneid', function(context) {
	            route("viewer", context);
	        });
	
	        page('/tutorial', function(context) {
	            route("tutorial", context);
	        });
	
	        page('/tunebook', function(context) {
	            route("tunebook", context);
	        });
	
	        page('/tunebook/view', function(context) {
	            route("tunebooks", context);
	        });
	
	        page('editor/:tuneid', function(context) {
	            route("editor", context);
	        });
	
	        page.serverMap("/auth/google");
	        page.serverMap("/logout");
	
	        page('*', function(context) {
	            console.log("BAD");
	        });
	
	        //route();
	
	        //window.onhashchange = route;
	
	        page.start();
	
	    });
	
	});

/***/ }
]);
//# sourceMappingURL=data:application/json;base64,