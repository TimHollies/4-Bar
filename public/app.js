webpackJsonp([0,2],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__.e/*nsure*/(1, function() {
	
	    var
	        Ractive = __webpack_require__(2).Ractive,
	        routingConfig = __webpack_require__(1),
	        page = __webpack_require__(2).page,
	        _ = __webpack_require__(2).lodash,
	        domready = __webpack_require__(2).domready;
	
	    domready(function() {
	
	        function route(currentRoute, context) {
	
	            if (routingConfig[currentRoute] !== undefined) {
	                var currentRouteConfig = routingConfig[currentRoute];
	
	                var dummyData = {};
	                var partials = [];
	                var partialviews = {};
	
	                if (currentRouteConfig.partials !== undefined) {
	                    partials = currentRouteConfig.partials;
	                    partialviews = partials.reduce(function(a, b) {
	                        a[b.name] = b.view;
	                        return a;
	                    }, {});
	                }
	
	                var ractive = new Ractive({
	                    el: "#stage",
	                    template: currentRouteConfig.template,
	                    data: dummyData,
	                    lazy: false,
	                    partials: partialviews
	                });
	
	                currentRouteConfig.model(ractive, dummyData, page, context);
	
	                _(partials).each(function(partial) {
	                    partial.model(ractive);
	                });
	
	            } else {
	
	            }
	        }
	
	        //forcs the request to go to the server rather than the client
	        page.serverMap = function(url) {
	            page(url, function(context) {
	                window.location = url;
	            });
	        }
	
	        page('', function(context) {
	            route("", context);
	        });
	
	        page('/editor', function(context) {
	            route("editor", context);
	        });
	
	        page('/user', function(context) {
	            route("user", context);
	        });
	
	        page('/viewer', function(context) {
	            route("viewer", context);
	        });
	
	        page('/viewer/:tuneid', function(context) {
	            route("viewer", context);
	        });
	
	        page('/tutorial', function(context) {
	            route("tutorial", context);
	        });
	
	        page('editor/:tuneid', function(context) {
	            route("editor", context);
	        });
	
	        page.serverMap("/auth/google");
	        page.serverMap("/logout");
	
	        page('*', function(context) {
	            console.log("BAD");
	        });
	
	        //route();
	
	        //window.onhashchange = route;
	
	        page.start();
	
	    });
	
	});

/***/ }
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7OytCQUVFLENBQUMsQ0FBUSxhQUFhOztLQUVoQyxDQUFDLENBQUM7aUJBQ1UscUJBQVMsQ0FBQyxDQUFRLENBQUMsUUFBUTt1QkFDckIscUJBQVMsQ0FBQyxDQUF3QixDQUFDO2NBQzVDLHFCQUFTLENBQUMsQ0FBUSxDQUFDLEtBQUs7V0FDM0IscUJBQVMsQ0FBQyxDQUFRLENBQUMsT0FBTztrQkFDbkIscUJBQVMsQ0FBQyxDQUFRLENBQUMsU0FBUzs7YUFFakMsWUFBTzs7K0NBRTJCOzthQUVsQyxDQUFDLEVBQUUsY0FBYyxhQUFhLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRTtpQkFDM0MsQ0FBQyxDQUFDLHFCQUFxQixlQUFlLGFBQWEsQ0FBQzs7aUJBRXBELENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO2lCQUNsQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztpQkFDakIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7O2lCQUVyQixDQUFDLEVBQUUsbUJBQW1CLFVBQVUsQ0FBQyxDQUFDLFdBQVcsRUFBRTs4QkFDbEMsb0JBQW9CLFNBQVM7a0NBQ3pCLFVBQVUsT0FBTyxnQkFBZ0I7MEJBQ3pDLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSzt5QkFDbEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7cUJBQ1osQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNWOztpQkFFQSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUM7dUJBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzZCQUNKLG9CQUFvQixTQUFTO3lCQUNqQyxXQUFXO3lCQUNYLEVBQUUsQ0FB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LENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7U0FFVCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7YUFFekIsTUFBTSxDQUFDLENBQUM7O0tBRWhCLENBQUMsQ0FBQzs7QUFFTixFQUFDLENBQUMsQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnJlcXVpcmUuZW5zdXJlKCd2ZW5kb3InLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICB2YXJcclxuICAgICAgICBSYWN0aXZlID0gcmVxdWlyZSgndmVuZG9yJykuUmFjdGl2ZSxcclxuICAgICAgICByb3V0aW5nQ29uZmlnID0gcmVxdWlyZShcIi4uL3JvdXRlcy9jb25maWcucm91dGVcIiksXHJcbiAgICAgICAgcGFnZSA9IHJlcXVpcmUoJ3ZlbmRvcicpLnBhZ2UsXHJcbiAgICAgICAgXyA9IHJlcXVpcmUoJ3ZlbmRvcicpLmxvZGFzaCxcclxuICAgICAgICBkb21yZWFkeSA9IHJlcXVpcmUoJ3ZlbmRvcicpLmRvbXJlYWR5O1xyXG5cclxuICAgIGRvbXJlYWR5KCgpID0+IHtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcm91dGUoY3VycmVudFJvdXRlLCBjb250ZXh0KSB7XHJcblxyXG4gICAgICAgICAgICBpZiAocm91dGluZ0NvbmZpZ1tjdXJyZW50Um91dGVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Um91dGVDb25maWcgPSByb3V0aW5nQ29uZmlnW2N1cnJlbnRSb3V0ZV07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGR1bW15RGF0YSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFydGlhbHZpZXdzID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSb3V0ZUNvbmZpZy5wYXJ0aWFscyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbHMgPSBjdXJyZW50Um91dGVDb25maWcucGFydGlhbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbHZpZXdzID0gcGFydGlhbHMucmVkdWNlKGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYVtiLm5hbWVdID0gYi52aWV3O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJhY3RpdmUgPSBuZXcgUmFjdGl2ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZWw6IFwiI3N0YWdlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IGN1cnJlbnRSb3V0ZUNvbmZpZy50ZW1wbGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkdW1teURhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgbGF6eTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbHM6IHBhcnRpYWx2aWV3c1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJvdXRlQ29uZmlnLm1vZGVsKHJhY3RpdmUsIGR1bW15RGF0YSwgcGFnZSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgICAgICAgICAgXyhwYXJ0aWFscykuZWFjaChmdW5jdGlvbihwYXJ0aWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbC5tb2RlbChyYWN0aXZlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZm9yY3MgdGhlIHJlcXVlc3QgdG8gZ28gdG8gdGhlIHNlcnZlciByYXRoZXIgdGhhbiB0aGUgY2xpZW50XHJcbiAgICAgICAgcGFnZS5zZXJ2ZXJNYXAgPSBmdW5jdGlvbih1cmwpIHtcclxuICAgICAgICAgICAgcGFnZSh1cmwsIGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHVybDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYWdlKCcnLCBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHJvdXRlKFwiXCIsIGNvbnRleHQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwYWdlKCcvZWRpdG9yJywgZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgICAgICAgICByb3V0ZShcImVkaXRvclwiLCBjb250ZXh0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFnZSgnL3VzZXInLCBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHJvdXRlKFwidXNlclwiLCBjb250ZXh0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFnZSgnL3ZpZXdlcicsIGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgcm91dGUoXCJ2aWV3ZXJcIiwgY29udGV4dCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBhZ2UoJy92aWV3ZXIvOnR1bmVpZCcsIGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgcm91dGUoXCJ2aWV3ZXJcIiwgY29udGV4dCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBhZ2UoJy90dXRvcmlhbCcsIGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgcm91dGUoXCJ0dXRvcmlhbFwiLCBjb250ZXh0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFnZSgnZWRpdG9yLzp0dW5laWQnLCBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHJvdXRlKFwiZWRpdG9yXCIsIGNvbnRleHQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwYWdlLnNlcnZlck1hcChcIi9hdXRoL2dvb2dsZVwiKTtcclxuICAgICAgICBwYWdlLnNlcnZlck1hcChcIi9sb2dvdXRcIik7XHJcblxyXG4gICAgICAgIHBhZ2UoJyonLCBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQkFEXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL3JvdXRlKCk7XHJcblxyXG4gICAgICAgIC8vd2luZG93Lm9uaGFzaGNoYW5nZSA9IHJvdXRlO1xyXG5cclxuICAgICAgICBwYWdlLnN0YXJ0KCk7XHJcblxyXG4gICAgfSk7XHJcblxyXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC9hcHAuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiIsImZpbGUiOiJhcHAuanMifQ==